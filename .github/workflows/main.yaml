jobs:
  # ======================
  # CI STAGE (Build & Push Docker Image)
  # ======================
  ci-build-test:
    runs-on: ubuntu-latest   # GitHub runner has Docker pre-installed
    if: github.event.inputs.skip_tests != 'true'
    outputs:
      image-tag: ${{ steps.build-info.outputs.image-tag }}
      git-sha: ${{ steps.build-info.outputs.git-sha }}
      should-deploy: ${{ steps.build-info.outputs.should-deploy }}
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - run: pip install -r requirements.txt
      - run: pytest || echo "⚠️ No tests found"

      - id: build-info
        run: |
          GIT_SHA=$(git rev-parse --short HEAD)
          IMAGE_TAG="${GIT_SHA}-$(date +%s)"
          echo "git-sha=$GIT_SHA" >> $GITHUB_OUTPUT
          echo "image-tag=$IMAGE_TAG" >> $GITHUB_OUTPUT
          echo "should-deploy=true" >> $GITHUB_OUTPUT

      - uses: docker/setup-buildx-action@v3
      - uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ env.DOCKER_IMAGE_NAME }}:latest
            ${{ env.DOCKER_IMAGE_NAME }}:${{ steps.build-info.outputs.git-sha }}
            ${{ env.DOCKER_IMAGE_NAME }}:${{ steps.build-info.outputs.image-tag }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # ======================
  # CD STAGE (Deploy to Kubernetes)
  # ======================
  cd-deploy:
    runs-on: self-hosted   # Only for k8s apply
    needs: ci-build-test
    if: always() && (needs.ci-build-test.result == 'success' || github.event.inputs.skip_tests == 'true')
    steps:
      - uses: actions/checkout@v4
      - name: Set deployment variables
        run: |
          if [[ "${{ github.event.inputs.skip_tests }}" == "true" ]]; then
            echo "IMAGE_TAG=latest" >> $GITHUB_ENV
            echo "GIT_SHA=$(git rev-parse --short HEAD)" >> $GITHUB_ENV
          else
            echo "IMAGE_TAG=${{ needs.ci-build-test.outputs.git-sha }}" >> $GITHUB_ENV
            echo "GIT_SHA=${{ needs.ci-build-test.outputs.git-sha }}" >> $GITHUB_ENV
          fi
          DEPLOY_ENV="${{ github.event.inputs.environment }}"
          echo "NAMESPACE=${DEPLOY_ENV:-analytics}" >> $GITHUB_ENV

      - name: Deploy to Kubernetes
        run: |
          kubectl apply -f k8s/analytics-deployment.yaml -n ${{ env.NAMESPACE }}
          kubectl apply -f k8s/analytics-service.yaml -n ${{ env.NAMESPACE }}
          kubectl rollout status deployment/analytics-deployment -n ${{ env.NAMESPACE }} --timeout=300s
